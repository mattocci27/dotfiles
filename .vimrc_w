" colors ---------------------------------------------------------------
syntax enable
"test
set t_ut= "clearing uses the current background color

set background=light

if (v:version >= 800) && has("termguicolors")
  set termguicolors
  set t_8b=[48;2;%lu;%lu;%lum
  set t_8f=[38;2;%lu;%lu;%lum

  " change cursor
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=\e[6q\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=\e[4q\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=\e[2q\x7\<Esc>\\"
  colorscheme solarized8_light
  "highlight CursorLine guibg='#292930'
else
  set t_Co=256
  colorscheme material-theme
endif



"different plugin path
"set runtimepath+=$HOME/.vim/gui

" base setting
" -------------------------------------------------------------------
"I don't want to use backup and undo files.
set nobackup
set noswapfile
set noundofile
set guifont=Cousine\ Nerd\ Font\ Plus\ Font\ Awesome\ Plus\ Octicons\ Plus\ Pomicons\ Plus\ Font\ Linux\ Windows\ Compatible:h16
set guifont=Cousine:h16
set encoding=utf-8
set nonumber " put line numbers
set clipboard=unnamed,autoselect " use clipboard
set ruler "use ruler
hi clear CursorLine
set nocursorline
set cmdheight=2 "height for cmd
set laststatus=2 "position for status line
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P " contens for status line
set title " show file path in title
set expandtab " tab -> space
set tabstop=2 "
set shiftwidth=2
set smartindent "
set linespace=1
set wrap
set textwidth=0
set columns=80
set synmaxcol=200
set spell

set list
set listchars=tab:\|\ ,trail:Â·,eol:â†²,extends:Â»,precedes:Â«,nbsp:%

set foldmethod=indent
set foldlevel=2
set foldcolumn=3

" keybinding
nnoremap <s-h>   ^
nnoremap <s-j>   }
nnoremap <s-k>   {
nnoremap <s-l>   $
vmap <s-h>       ^
vmap <s-l>       $

"Easier split navigations
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h


inoremap { {}<Left>
inoremap {<Enter> {}<Left><CR><ESC><S-o>
inoremap ( ()<ESC>i
inoremap (<Enter> ()<Left><CR><ESC><S-o>))}}

set backspace=indent,eol,start "enable delete key
let mapleader = "\<space>"

"copy one line
noremap <leader>v 0v$h
noremap <leader>o :<c-p> <cr>
noremap <leader>w :w <CR>


" vv to generate new vertical split 
nnoremap <silent> vv <C-w>v

nnoremap <leader>B :<c-u>exe "source ~/.vimrc_mac" <cr>
"autocmd BufWritePre * :%s/\s\+$//ge
"map <s>co <s-i># <esc>
" filetypes -----------------------------------------------------------

" Coffee {{{
"augroup filetype_r
"  autocmd!
"  au BufNewFile,BufReadPost *.r,*R, setl foldmethod=indent nofoldenable
"augroup END
" }}}

"Plugin
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' "
Plugin 'jalvesaq/Nvim-R'
Plugin 'Townk/vim-autoclose'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'Yggdroot/indentLine'
Plugin 'Shougo/neocomplete.vim'
Plugin 'godlygeek/tabular'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'vim-scripts/SyntaxRange'
Plugin 'shime/vim-livedown'
Plugin 'tpope/vim-surround'

" markdown
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
"Plugin 'plasticboy/vim-markdown'
Plugin 'mattocci27/vim-markdown'

" focus
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

" editing
Plugin 'rhysd/vim-grammarous'

call vundle#end()            " required
filetype plugin indent on    " required


" nerdtree {{{
nnoremap <silent><C-e> :NERDTreeToggle<CR>
let g:NERDTreeDirArrows = 1
let NERDTreeWinSize=22
" }}}
" vim-nerdtree-syntax-highlight{{{
let s:rspec_red = 'FE405F'
let s:git_orange = 'F54D27'
let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files
let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red " sets the color for files ending with _spec.rb
"}}}
" Nvim-R{{{
vmap <leader>r <Plug>RSendLine
nmap <leader>r <Plug>RSendLine
nmap <leader>sr <Plug>RStart
"imap <leader>sr <Plug>RStart
vmap <leader>sr <Plug>RStart
nmap <leader>qr <Plug>RClose
"imap <leader>qr <Plug>RClose
vmap <leader>qr <Plug>RClose

"Not to use the R.app
let R_in_buffer = 0
let R_applescript = 0
let R_tmux_split = 1
let R_nvimpager = "tab"
let R_rconsole_width = 0 
let R_assign = 0 "do not use <-
" }}}
" vim-fugitive{{{ show git brunch
if isdirectory(expand('~/.vim/bundle/vim-fugitive'))
  set statusline+=%{fugitive#statusline()}
endif
" }}}
" Nvim-R{{{
vmap <leader>r <Plug>RSendLine
nmap <leader>r <Plug>RSendLine
nmap <leader>sr <Plug>RStart
"imap <leader>sr <Plug>RStart
vmap <leader>sr <Plug>RStart
nmap <leader>qr <Plug>RClose
"imap <leader>qr <Plug>RClose
vmap <leader>qr <Plug>RClose

"Not to use the R.app
let R_in_buffer = 0
let R_applescript = 0
let R_tmux_split = 1
let R_nvimpager = "tab"
let R_rconsole_width = 0
let R_assign = 0 "do not use <-
let R_source_args = "echo=TRUE, print.eval=TRUE"

" }}}
" powerline{{{
" let g:airline_powerline_fonts=1
" }}}
" indentLine{{{
let g:indetLine_char = '|'
" }}}
" gitgutter{{{
let g:gitgutter_override_sign_column_highlight = 0
highlight SignColumn guibg='#fdf6e3'   " terminal Vim "
" }}}
" vim-airline{{{
"let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 2
let g:airline_theme='solarized'
let g:airline_solarized_bg='light'
let g:airline_powerline_fonts = 1
"}}}
"vim_markdown{{{
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
"}}}
"vim_devicons{{{
autocmd FileType nerdtree setlocal nolist
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
"}}}
"goyo{{{
let g:goyo_width = 80
"}}}

